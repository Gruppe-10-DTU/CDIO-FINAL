@startuml
skinparam linetype polyline
skinparam linetype ortho
left to right direction

interface ActionListener {
    actionPerformed(e : ActionEvent)
}
class models.Character {
- name : String
- color : Color
- setColor(colorIndex : int) : Color
}

class controllers.GUIConverter {
+ {static} playerToGUI(players: Player[]) : GUI_Player[]
+ {static} fieldListToGUI(fields: Field[]) : GUI_Field[]
}
class controllers.GameController {
- diceHolder : DiceHolder
- turnCounter : int
- guiController : GUIController
- playerController : PlayerController
- fieldController : FieldController
- deck : Deck
- p : Popup
- looper : boolean
- gameState : GameStateDTO
+ initialize()
+ startGame()
+ takeTurn(player: Player)
+ actionPerformed(e : ActionEvent)
+ win() : boolean
+ winMsg()
}
class controllers.FieldController {
# fieldArrayList : Field[]
- Language language
- housePool : int = 32
- hotelPool : int = 12
# createFieldArray(fieldData : String[][])
+ jailPlayer(player : Player)
+ landOnField(gameStateDTO : GameStateDTO) : GameStateDTO
+ landOnField(gameStateDTO : GameStateDTO, rentMultiplier : inter) : GameStateDTO
+ playerPropertyValues(player : Player) : int
+ getField(id : int) : Field
+ int distToFirstFerry(player : Player, gameInReverse : boolean)
+ ferrysOwned(player : Player, startField : int, ferrys : int) : int
+ breweriesOwned(player : Player,fieldId : int) : int
+ toString() : String
+ isJailed(player : Player) : boolean
+ addHouse(street: Street)
+ addHotel(street: Street)
+ getStreetFromString(name: String) : Street
+ ownsColourGroup(player : Player) : Map<String,Street[]>
+ buildEqual(sort : Map<String,Street[]>) : Map<String,Street[]>
+ propertyWithBuilding(checkProps : Map<String,Street[]>) : Map<String,Street[]>
+ addBuilding(property : Street)
+ getStreetFromString(street : String) : Street
+ void sellBuilding(property : Street, amountToSell : int)
+ housesAndHotelsOwned(player : Player) : int[]
+ removePlayer(player : Player) : Property[]
+ boolean sell(player : Player, price : int, gameState : IGameStateDTO)
}
class models.Language {
- languageValues : HashMap<String,String>
- {static} instance : Language = Language()
+ String getLanguageValue(key : String, values : String[])
+ String getLanguageValue(key : String)
+ updateLanguage(language : String)
}
abstract class models.ChanceCard {
# String name
# String description
+ {abstract} chanceEffect(gameStateDTO : IGameStateDTO) : GameStateDTO
}

class models.Player {
- iD : int
- balance : Balance
- identifier : String
- character : Character
- location : int
- previousLocation : int
- getOutOfJail : GetOutOfJail[]
- roundsInJail : int
+ setLocation(oldValue: int, increase: int)
+ hasGetOutOfJail() : boolean
+ addGetOutOfJail(getOutOfJail : GetOutOfJail)
+ useGetOutOfJail()
+ stayInJail()
}

class ui.guiController{
- gui : GUI
- gui_players : GUI_Player[]
+ getBid(msg : String,min : int, max : int) : int
+ playerAmount(playerAmountText : String) : int
+ selectCharacter(character : String, choices : String) : String
+ getName(getNameText : String) : String
+ getUserLeftButtonPressed(message : String, trueButton : String, falseButton : String) : boolean
+ getOutOfJailOptions(canPay : boolean, hasChanceCard : boolean) : String
+ selectBuild(selectBuild : String,choices : Street[]) : String
+ selectColorBuild(chooseColorOptions : String,color : String[]) : String
+ setPlayers(players : Player[])
+ displayMsg(msg : String)
+ updatePlayer(player : Player)
+ movePlayer(player : Player, reverse : boolean)
+ displayDice(rolls : int[])
+ updateField(property : Property, fieldController : FieldController)
+ displayMsgNoBtn(msg : String)
+ showChanceCard(message : String)
+ endGame()
+ getRoll(rollText : String, rollButton : String)
+ updateBoard(playerController : PlayerController,fieldController : FieldController)
+ getOutOfJailRollAgain()
+ guiAddHouse(property : Street,amount : int)
+ guiAddHotel(property : Street)
+ guiRemoveHotel(property : Street)
+ removePlayer(player : Player, properties : Property[])
}


abstract class models.Field {
# name : String
# iD : int
# language : Language
+ fieldEffect(gameStateDTO : IGameStateDTO)
+ {abstract} fieldEffect(gameStateDTO : GameStateDTO, rentMultiplier : int) : GameStateDTO
}

class controllers.PlayerController {
- availablePlayers : LinkedHashMap<Integer,Player>
+ addPlayer(id: int,characterName : String,name : String, color : int)
+ removePlayer(id : int)
+ playerMove(player : Player,spaces : int) : Player
+ getPlayerById(id : int) : Player
+ otherPlayers(id : int) : Player[]
+ otherPlayers(playerId : int) : Player[]
+ playerUnique(name : String) : boolean
}
class controllers.DiceHolder {
- dice : Die[]
- rolls : int[]
- sameRolls : int
+ roll()
- rollDie()
+ sum() : int
+ sum(reverse : boolean) : int
+ isEqual() : boolean
+ toString() : String
+ incrementSameRolls()
}
class controllers.StartValues {
- properties : Properties
- {static} instance : StartValues
+ getValue(key : String) : int
}

class models.Balance {
- balance : int
}

class models.Die {
- sides : int
+ roll() : int
}
interface models.dto.IGameStateDTO {
+ getActivePlayer() : Player
+ getGuiController() : GUIController
+ getFieldController() : FieldController
+ getPlayerController() : PlayerController
+ getDiceHolder() : DiceHolder
+ getChanceCardDeck() : Deck
+ getOtherPlayers() : Player[]
+ isReverse() : boolean
}
class models.dto.GameStateDTO {
- activePlayer: Player
- otherPlayers: Player[]
- guiController: GUIController
- fieldController: FieldController
- playerController: PlayerController
- gameController : GameController
- chancecardDeck: Deck
- diceHolder: DiceHolder
- reverse : boolean
}
class controllers.Deck {
- deck : Card[]
+ shuffle()
+ drawCard() : ChanceCard
+ getDeckSize() : int
+ returnToDeck(chanceCard : ChanceCard)
+ rigDeck(offset : int)
}

class controllers.CSVReader {
- DELIMITER : String
- reader : BufferedReader
- headers : String[]
- file : String
- fileAsArrList : String[][]
+ getDataAsArrList() : String[][]
+ toString(): String
+ getHeaderIndex(key: String): int
}

'Models ejere
models.Player o- models.Character
models.Player o- models.Balance
models.Player -- models.ChanceCard

'Controllers ejere
controllers.DiceHolder"1" o- "2"models.Die
controllers.PlayerController "1" o- "3..6" models.Player
controllers.FieldController"1" o- "40" models.Field
controllers.Deck"1" o- "45" models.ChanceCard

controllers.GameController <|.. ActionListener
controllers.GameController -- controllers.PlayerController
controllers.GameController -- controllers.FieldController
controllers.GameController -- controllers.Deck
controllers.GameController -- controllers.DiceHolder
controllers.GameController -- models.dto.GameStateDTO
controllers.GameController -- ui.guiController

models.dto.IGameStateDTO <|.. models.dto.GameStateDTO
models.dto.IGameStateDTO -- controllers.PlayerController
models.dto.IGameStateDTO -- controllers.FieldController
models.dto.IGameStateDTO -up- controllers.Deck
models.dto.IGameStateDTO -- controllers.DiceHolder
models.dto.IGameStateDTO -- ui.guiController
models.dto.IGameStateDTO -- models.Player

controllers.FieldController -- controllers.CSVReader
controllers.Deck -- controllers.CSVReader

controllers.PlayerController <.. controllers.StartValues : use
ui.guiController <.. controllers.StartValues : use
ui.guiController <.. controllers.GUIConverter : use


controllers.PlayerController <.. models.Language : use
ui.guiController <.. models.Language : use
controllers.FieldController <.. models.Language : use


models.dto.IGameStateDTO -- models.Field
models.dto.IGameStateDTO -- models.ChanceCard
@enduml